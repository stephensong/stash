{"version":3,"file":"index.esm.js","sources":["../src/index.tsx"],"sourcesContent":["// Packages\nimport * as React from 'react';\nimport { Store, DispatchFunc } from '@stash/it';\n\nconst StateContext = React.createContext(undefined);\nconst DispatchContext = React.createContext(undefined);\n\ninterface Props {\n\tstore: Store;\n}\n\n/**\n * Subscribe to to store and re-render if necessary.\n */\nexport const Provider: React.FunctionComponent<Props> = function(props) {\n\tconst { store } = props;\n\tconst [state, setState] = React.useState(store.getState());\n\n\tReact.useEffect(\n\t\tfunction() {\n\t\t\tfunction update(next: any) {\n\t\t\t\t// Skip unnecessary updates\n\t\t\t\tif (state !== next) {\n\t\t\t\t\tsetState(next);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn store.subscribe(update);\n\t\t},\n\t\t[store]\n\t);\n\n\treturn (\n\t\t<DispatchContext.Provider value={store.dispatch}>\n\t\t\t<StateContext.Provider value={state}>\n\t\t\t\t{props.children}\n\t\t\t</StateContext.Provider>\n\t\t</DispatchContext.Provider>\n\t);\n};\n\n/**\n * A hook to get current state\n */\nexport function useSelect() {\n\tconst state = React.useContext(StateContext);\n\treturn state;\n}\n\n/**\n * A proxy to access store's dispatch function\n */\nexport function useDispatch<P>(): DispatchFunc<P> {\n\treturn React.useContext(DispatchContext);\n}\n"],"names":["const","StateContext","React","undefined","DispatchContext","Provider","props","store","getState","subscribe","next","state","setState","value","dispatch","children","useSelect","useDispatch"],"mappings":"sGAIAA,IAAMC,EAAeC,OAAoBC,GACnCC,EAAkBF,OAAoBC,GAS/BE,EAA2C,SAASC,GACxDC,gBACkBL,EAAeK,EAAMC,iCAE/CN,EACC,kBAQQK,EAAME,mBAPGC,GAEXC,IAAUD,GACbE,EAASF,MAMZ,CAACH,IAIDL,EAACE,EAAgBC,UAASQ,MAAON,EAAMO,UACtCZ,EAACD,EAAaI,UAASQ,MAAOF,GAC5BL,EAAMS,YASX,SAAgBC,WACDd,EAAiBD,GAOhC,SAAgBgB,WACRf,EAAiBE"}