{"version":3,"file":"index.esm.js","sources":["../src/index.ts"],"sourcesContent":["// Packages\nimport isPromise from 'is-promise';\n\n// Ours\nimport {\n\tAction,\n\tActionFunc,\n\tStore,\n\tState,\n\tSubscriber,\n\tUnsubscribeFunc\n} from './types';\n\n/**\n * Create an action function\n */\nexport function createAction<T>(type: string, fn: ActionFunc<T>): Action<T> {\n\t(fn as Action<T>).type = type;\n\treturn fn;\n}\n\n/**\n * Create an thunk function\n */\nexport function createThunk<T>(type: string, fn: ActionFunc<T>): Action<T> {\n\tconst act = createAction(type, fn);\n\n\t// Mark as a thunk\n\tact.thunk = true;\n\n\treturn act;\n}\n\n/**\n * Create a store that holds the state tree.\n */\nexport function createStore(state?: State): Store {\n\t// List of listeners\n\tconst subscribers: Subscriber[] = [];\n\n\t/**\n\t * Call `action()` and persist the result back to the store.\n\t */\n\tfunction dispatch<P>(action: Action<P>, payload?: P) {\n\t\tif (typeof action !== 'function') {\n\t\t\tthrow new Error('Expected action to be a function');\n\t\t}\n\n\t\tif (typeof action.type !== 'string') {\n\t\t\tthrow new Error('Expected action.type to be a string');\n\t\t}\n\n\t\t// Run as thunk\n\t\tif (action.thunk) {\n\t\t\taction(state, payload, dispatch);\n\t\t} else {\n\t\t\tconst next = action(state, payload);\n\n\t\t\t// Override the state but ignore promises ;)\n\t\t\tif (!isPromise(next)) {\n\t\t\t\tstate = next;\n\t\t\t}\n\t\t}\n\n\t\t// Notify subscribers\n\t\tfor (let sub of subscribers) {\n\t\t\tsub(state, action);\n\t\t}\n\t}\n\n\t/**\n\t * Register a subscriber function to be called whenever state\n\t * is changed. Returns an `unsubscribe()` function.\n\t */\n\tfunction subscribe(fn: Subscriber): UnsubscribeFunc {\n\t\tif (typeof fn !== 'function') {\n\t\t\tthrow new Error('A subscriber must be a function');\n\t\t}\n\n\t\t// Add to the list\n\t\tsubscribers.push(fn);\n\n\t\t// Unsubscribe\n\t\treturn () => {\n\t\t\tconst index = subscribers.indexOf(fn);\n\n\t\t\tif (index >= 0) {\n\t\t\t\tsubscribers.splice(index, 1);\n\t\t\t}\n\t\t};\n\t}\n\n\t/**\n\t * Return current state tree.\n\t */\n\tfunction getState(): State {\n\t\treturn state;\n\t}\n\n\t// Exposed store methods\n\treturn { dispatch, subscribe, getState };\n}\n\n// Export types\nexport * from './types';\n"],"names":["createAction","type","fn","createThunk","act","thunk","createStore","state","subscribers","dispatch","action","payload","Error","next","isPromise","sub","push","index","indexOf","splice"],"mappings":"mCAgBgBA,EAAgBC,EAAcC,UAC5CA,EAAiBD,KAAOA,EAClBC,WAMQC,EAAeF,EAAcC,OACtCE,EAAMJ,EAAaC,EAAMC,UAG/BE,EAAIC,OAAQ,EAELD,WAMQE,EAAYC,OAErBC,EAA4B,SA8D3B,mBAzDEC,EAAYC,EAAmBC,MACjB,mBAAXD,QACJ,IAAIE,MAAM,uCAGU,iBAAhBF,EAAOT,WACX,IAAIW,MAAM,0CAIbF,EAAOL,MACVK,EAAOH,EAAOI,EAASF,OACjB,KACAI,EAAOH,EAAOH,EAAOI,GAGtBG,EAAUD,KACdN,EAAQM,OAKL,UAAWL,mBACfO,QAAIR,EAAOG,uBAQMR,MACA,mBAAPA,QACJ,IAAIU,MAAM,0CAIjBJ,EAAYQ,KAAKd,kBAIVe,EAAQT,EAAYU,QAAQhB,GAE9Be,GAAS,GACZT,EAAYW,OAAOF,EAAO,gCASrBV"}